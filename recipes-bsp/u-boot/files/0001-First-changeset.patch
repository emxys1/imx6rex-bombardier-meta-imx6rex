From f7707155b73c65f4405b30c04c77e5661df97f55 Mon Sep 17 00:00:00 2001
From: angel-munoz <ext.angel.munoz@es.transport.bombardier.com>
Date: Wed, 19 Aug 2015 12:49:50 +0200
Subject: [PATCH] First changeset

---
 board/freescale/mx6sabresd/mx6q_4x_mt41j128.cfg | 233 +++++++++++++-----------
 board/freescale/mx6sabresd/mx6sabresd.c         | 116 +++++-------
 include/configs/mx6sabre_common.h               |  17 +-
 include/configs/mx6sabresd.h                    |   2 +-
 4 files changed, 174 insertions(+), 194 deletions(-)

diff --git a/board/freescale/mx6sabresd/mx6q_4x_mt41j128.cfg b/board/freescale/mx6sabresd/mx6q_4x_mt41j128.cfg
index bb6c60b..077eac8 100644
--- a/board/freescale/mx6sabresd/mx6q_4x_mt41j128.cfg
+++ b/board/freescale/mx6sabresd/mx6q_4x_mt41j128.cfg
@@ -30,126 +30,137 @@ BOOT_FROM      sd
  *      Address   absolute address of the register
  *      value     value to be stored in the register
  */
-DATA 4 0x020e05a8 0x00000030
-DATA 4 0x020e05b0 0x00000030
-DATA 4 0x020e0524 0x00000030
-DATA 4 0x020e051c 0x00000030
-
-DATA 4 0x020e0518 0x00000030
-DATA 4 0x020e050c 0x00000030
-DATA 4 0x020e05b8 0x00000030
-DATA 4 0x020e05c0 0x00000030
-
-DATA 4 0x020e05ac 0x00020030
-DATA 4 0x020e05b4 0x00020030
-DATA 4 0x020e0528 0x00020030
-DATA 4 0x020e0520 0x00020030
-
-DATA 4 0x020e0514 0x00020030
-DATA 4 0x020e0510 0x00020030
-DATA 4 0x020e05bc 0x00020030
-DATA 4 0x020e05c4 0x00020030
-
-DATA 4 0x020e056c 0x00020030
-DATA 4 0x020e0578 0x00020030
-DATA 4 0x020e0588 0x00020030
-DATA 4 0x020e0594 0x00020030
-
-DATA 4 0x020e057c 0x00020030
-DATA 4 0x020e0590 0x00003000
-DATA 4 0x020e0598 0x00003000
-DATA 4 0x020e058c 0x00000000
-
-DATA 4 0x020e059c 0x00003030
-DATA 4 0x020e05a0 0x00003030
-DATA 4 0x020e0784 0x00000030
-DATA 4 0x020e0788 0x00000030
-
-DATA 4 0x020e0794 0x00000030
-DATA 4 0x020e079c 0x00000030
-DATA 4 0x020e07a0 0x00000030
-DATA 4 0x020e07a4 0x00000030
-
-DATA 4 0x020e07a8 0x00000030
-DATA 4 0x020e0748 0x00000030
-DATA 4 0x020e074c 0x00000030
-DATA 4 0x020e0750 0x00020000
-
-DATA 4 0x020e0758 0x00000000
-DATA 4 0x020e0774 0x00020000
-DATA 4 0x020e078c 0x00000030
-DATA 4 0x020e0798 0x000C0000
-
-DATA 4 0x021b081c 0x33333333
-DATA 4 0x021b0820 0x33333333
-DATA 4 0x021b0824 0x33333333
-DATA 4 0x021b0828 0x33333333
-
-DATA 4 0x021b481c 0x33333333
-DATA 4 0x021b4820 0x33333333
-DATA 4 0x021b4824 0x33333333
-DATA 4 0x021b4828 0x33333333
-
-DATA 4 0x021b0018 0x00081740
-
-DATA 4 0x021b001c 0x00008000
-DATA 4 0x021b000c 0x555A7974
-DATA 4 0x021b0010 0xDB538F64
-DATA 4 0x021b0014 0x01FF00DB
-DATA 4 0x021b002c 0x000026D2
-
-DATA 4 0x021b0030 0x005A1023
-DATA 4 0x021b0008 0x09444040
-DATA 4 0x021b0004 0x00025576
-DATA 4 0x021b0040 0x00000027
-DATA 4 0x021b0000 0x831A0000
-
-DATA 4 0x021b001c 0x04088032
-DATA 4 0x021b001c 0x0408803A
-DATA 4 0x021b001c 0x00008033
-DATA 4 0x021b001c 0x0000803B
-DATA 4 0x021b001c 0x00428031
-DATA 4 0x021b001c 0x00428039
-DATA 4 0x021b001c 0x19308030
-DATA 4 0x021b001c 0x19308038
-
-DATA 4 0x021b001c 0x04008040
-DATA 4 0x021b001c 0x04008048
-DATA 4 0x021b0800 0xA1380003
+DATA 4 0x020e05a8 0x00000030 // .was 0x00000030 IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0 
+DATA 4 0x020e05b0 0x00000030 // .was 0x00000030 IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1 
+DATA 4 0x020e0524 0x00000030 // .was 0x00000030 IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2 
+DATA 4 0x020e051c 0x00000030 // .was 0x00000030 IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3  
+
+DATA 4 0x020e0518 0x00000030 // .was 0x00000030 IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4 
+DATA 4 0x020e050c 0x00000030 // .was 0x00000030 IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5
+DATA 4 0x020e05b8 0x00000030 // .was 0x00000030 IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6 
+DATA 4 0x020e05c0 0x00000030 // .was 0x00000030 IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7
+
+DATA 4 0x020e05ac 0x00000030 // .was 0x00020030 IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0
+DATA 4 0x020e05b4 0x00000030 // .was 0x00020030 IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1
+DATA 4 0x020e0528 0x00000030 // .was 0x00020030 IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2
+DATA 4 0x020e0520 0x00000030 // .was 0x00020030 IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3
+
+DATA 4 0x020e0514 0x00000030 // .was 0x00020030 IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4
+DATA 4 0x020e0510 0x00000030 // .was 0x00020030 IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5
+DATA 4 0x020e05bc 0x00000030 // .was 0x00020030 IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6
+DATA 4 0x020e05c4 0x00000030 // .was 0x00020030 IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7
+
+DATA 4 0x020e056c 0x00000030 // .was 0x00020030 IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS
+DATA 4 0x020e0578 0x00000030 // .was 0x00020030 IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS
+DATA 4 0x020e0588 0x00000030 // .was 0x00020030 IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0 
+DATA 4 0x020e0594 0x00000030 // .was 0x00020030 IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1
+
+DATA 4 0x020e057c 0x00000030 // .was 0x00020030 IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET
+DATA 4 0x020e0590 0x00003000 // not included in the calibration file
+DATA 4 0x020e0598 0x00003000 // not included in the calibration file
+DATA 4 0x020e058c 0x00000000 // .was 0x00000000 IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2 - DSE can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_CTLDS 
+
+DATA 4 0x020e059c 0x00000030 // .was 0x00003030 IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0
+DATA 4 0x020e05a0 0x00000030 // .was 0x00003030 IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1
+DATA 4 0x020e0784 0x00000030 // .was 0x00000030 IOMUXC_SW_PAD_CTL_GRP_B0DS
+DATA 4 0x020e0788 0x00000030 // .was 0x00000030 IOMUXC_SW_PAD_CTL_GRP_B1DS
+
+DATA 4 0x020e0794 0x00000030 // .was 0x00000030 IOMUXC_SW_PAD_CTL_GRP_B2DS
+DATA 4 0x020e079c 0x00000030 // .was 0x00000030 IOMUXC_SW_PAD_CTL_GRP_B3DS
+DATA 4 0x020e07a0 0x00000030 // .was 0x00000030 IOMUXC_SW_PAD_CTL_GRP_B4DS
+DATA 4 0x020e07a4 0x00000030 // .was 0x00000030 IOMUXC_SW_PAD_CTL_GRP_B5DS
+
+DATA 4 0x020e07a8 0x00000030 // .was 0x00000030 IOMUXC_SW_PAD_CTL_GRP_B6DS
+DATA 4 0x020e0748 0x00000030 // .was 0x00000030 IOMUXC_SW_PAD_CTL_GRP_B7DS
+DATA 4 0x020e074c 0x00000030 // .was 0x00000030 IOMUXC_SW_PAD_CTL_GRP_ADDDS
+DATA 4 0x020e0750 0x00020000 // .was 0x00020000 IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL
+
+DATA 4 0x020e0758 0x00000000 // .was 0x00000000 IOMUXC_SW_PAD_CTL_GRP_DDRPKE
+DATA 4 0x020e0774 0x00020000 // .was 0x00020000 IOMUXC_SW_PAD_CTL_GRP_DDRMODE
+DATA 4 0x020e078c 0x00000030 // .was 0x00000030 IOMUXC_SW_PAD_CTL_GRP_CTLDS
+DATA 4 0x020e0798 0x000C0000 // .was 0x000C0000 IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
+
+DATA 4 0x021b081c 0x33333333 // .DDR_PHY_P0_MPREDQBY0DL3
+DATA 4 0x021b0820 0x33333333 // .DDR_PHY_P0_MPREDQBY1DL3
+DATA 4 0x021b0824 0x33333333 // .DDR_PHY_P0_MPREDQBY2DL3
+DATA 4 0x021b0828 0x33333333 // .DDR_PHY_P0_MPREDQBY3DL3
+
+DATA 4 0x021b481c 0x33333333 // .DDR_PHY_P1_MPREDQBY0DL3
+DATA 4 0x021b4820 0x33333333 // .DDR_PHY_P1_MPREDQBY1DL3
+DATA 4 0x021b4824 0x33333333 // .DDR_PHY_P1_MPREDQBY2DL3
+DATA 4 0x021b4828 0x33333333 // .DDR_PHY_P1_MPREDQBY3DL3
+
+DATA 4 0x021b0018 0x00001740 // .was 0x00081740 MMDC0_MDMISC
+
+DATA 4 0x021b001c 0x00008000 // .was 0x00008000 MMDC0_MDSCR, set the Configuration request bit during MMDC set up
+DATA 4 0x021b000c 0x555A7975 // .was 0x555A7975 MMDC0_MDCFG0
+DATA 4 0x021b0010 0xFF538F64 // .was 0xDB538F64 MMDC0_MDCFG1
+DATA 4 0x021b0014 0x01FF00DB // .was 0x01FF00DB MMDC0_MDCFG2
+DATA 4 0x021b002c 0x000026D2 // .was 0x000026d2 MMDC0_MDRWD; recommend to maintain the default values 
+
+DATA 4 0x021b0030 0x005A1023 // .was 0x005A1023 MMDC0_MDOR
+DATA 4 0x021b0008 0x09444040 // .was 0x09444040 MMDC0_MDOTC
+DATA 4 0x021b0004 0x00020036 // .was 0x00025576 MMDC0_MDPDC
+DATA 4 0x021b0040 0x00000027 // .was 0x00000027 CS0_END 
+DATA 4 0x021b0000 0x831A0000 // .was 0x831A0000 MMDC0_MDCTL
+
+
+DATA 4 0x021b001c 0x04088032   // .was 0x04088032 left as in original file
+//DATA 4 0x021b001c 0x0408803A // left as in original file
+DATA 4 0x021b001c 0x00008033   // .was 0x00008033 left as in original file
+//DATA 4 0x021b001c 0x0000803B // left as in original file
+DATA 4 0x021b001c 0x00048031   // .was 0x00428031 left as in original file
+//DATA 4 0x021b001c 0x00428039 // left as in original file
+DATA 4 0x021b001c 0x09408030   // .was 0x19308030 left as in original file
+//DATA 4 0x021b001c 0x19308038 // left as in original file
+
+DATA 4 0x021b001c 0x04008040   // .was 0x04008040 left as in original file
+//DATA 4 0x021b001c 0x04008048 // left as in original file
+
+DATA 4 0x021b0800 0xA1390003 // .was 0xA1380003 DDR_PHY_P0_MPZQHWCTRL, enable both one-time & periodic HW ZQ calibration.
 DATA 4 0x021b4800 0xA1380003
-DATA 4 0x021b0020 0x00005800
-DATA 4 0x021b0818 0x00022227
-DATA 4 0x021b4818 0x00022227
+DATA 4 0x021b0020 0x00005800 // .was 0x00005800 MMDC0_MDREF
+DATA 4 0x021b0818 0x00011117 // .was 0x00022227 DDR_PHY_P0_MPODTCTRL
+DATA 4 0x021b4818 0x00011117 // .was 0x00022227 DDR_PHY_P1_MPODTCTRL
 
-DATA 4 0x021b083c 0x434B0350
-DATA 4 0x021b0840 0x034C0359
-DATA 4 0x021b483c 0x434B0350
-DATA 4 0x021b4840 0x03650348
-DATA 4 0x021b0848 0x4436383B
-DATA 4 0x021b4848 0x39393341
-DATA 4 0x021b0850 0x35373933
-DATA 4 0x021b4850 0x48254A36
+//Read DQS Gating calibration
+DATA 4 0x021b083c 0x43280328 // .was 0x434B0350, MPDGCTRL0 PHY0
+DATA 4 0x021b0840 0x02460318 // .was 0x034C0359, MPDGCTRL1 PHY0
+DATA 4 0x021b483c 0x432C0338 // .was 0x434B0350, MPDGCTRL0 PHY1
+DATA 4 0x021b4840 0x03280268 // .was 0x03650348, MPDGCTRL1 PHY1
 
-DATA 4 0x021b080c 0x001F001F
-DATA 4 0x021b0810 0x001F001F
+//Read calibration
+DATA 4 0x021b0848 0x362E3034 // .was 0x4436383B, MPRDDLCTL PHY0
+DATA 4 0x021b4848 0x30322E3A // .was 0x39393341, MPRDDLCTL PHY1
 
-DATA 4 0x021b480c 0x00440044
-DATA 4 0x021b4810 0x00440044
+//Write calibration
+DATA 4 0x021b0850 0x403C4642 // .was 0x35373933, MPWRDLCTL PHY0
+DATA 4 0x021b4850 0x4836483C // .was 0x48254A36, MPWRDLCTL PHY1
 
-DATA 4 0x021b08b8 0x00000800
-DATA 4 0x021b48b8 0x00000800
+// write leveling
+DATA 4 0x021b080c 0x00190023 // .was 0x001F001F 
+DATA 4 0x021b0810 0x00260019 // .was 0x001F001F
 
-DATA 4 0x021b001c 0x00000000
-DATA 4 0x021b0404 0x00011006
+DATA 4 0x021b480c 0x0017001D // .was 0x00440044
+DATA 4 0x021b4810 0x000C001F // .was 0x00440044
+
+// Complete calibration by forced measurement:
+DATA 4 0x021b08b8 0x00000800 // .DDR_PHY_P0_MPMUR0, frc_msr
+DATA 4 0x021b48b8 0x00000800 // .DDR_PHY_P0_MPMUR0, frc_msr
+
+DATA 4 0x021b0004 0x00025576 // .added, 0x00025576 MMDC0_MDPDC
+
+DATA 4 0x021b001c 0x00000000 // .MMDC0_MDSCR, clear this register (especially the configuration bit as initialization is complete) 
+DATA 4 0x021b0404 0x00011006 // .MMDC0_MAPSR ADOPT power down enabled, MMDC will enter automatically to self-refresh while the number of idle cycle reached. 
 
 /* set the default clock gate to save power */
 DATA 4 0x020c4068 0x00C03F3F
-DATA 4 0x020c406c 0x0030FC03
-DATA 4 0x020c4070 0x0FFFC000
-DATA 4 0x020c4074 0x3FF00000
-DATA 4 0x020c4078 0x00FFF300
-DATA 4 0x020c407c 0x0F0000C3
-DATA 4 0x020c4080 0x000003FF
+DATA 4 0x020c406c 0x0030FC03 
+DATA 4 0x020c4070 0x0FFFC000 
+DATA 4 0x020c4074 0x3FF00000 
+DATA 4 0x020c4078 0x00FFF300 
+DATA 4 0x020c407c 0x0F0000C3 
+DATA 4 0x020c4080 0x000003FF 
 
 /* enable AXI cache for VDOA/VPU/IPU */
 DATA 4 0x020e0010 0xF00000CF
diff --git a/board/freescale/mx6sabresd/mx6sabresd.c b/board/freescale/mx6sabresd/mx6sabresd.c
index 23f8f6b..baea5e7 100644
--- a/board/freescale/mx6sabresd/mx6sabresd.c
+++ b/board/freescale/mx6sabresd/mx6sabresd.c
@@ -47,6 +47,10 @@ DECLARE_GLOBAL_DATA_PTR;
 #define SPI_PAD_CTRL (PAD_CTL_HYS | PAD_CTL_SPEED_MED | \
 		      PAD_CTL_DSE_40ohm | PAD_CTL_SRE_FAST)
 
+#define RGMIIRST_PAD_CTRL  (PAD_CTL_PUS_100K_UP |		\
+	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm |			\
+	PAD_CTL_SRE_FAST  | PAD_CTL_HYS | PAD_CTL_ODE)
+
 #define I2C_PAD_CTRL  (PAD_CTL_PUS_100K_UP |			\
 	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_HYS |	\
 	PAD_CTL_ODE | PAD_CTL_SRE_FAST)
@@ -84,15 +88,15 @@ static iomux_v3_cfg_t const enet_pads[] = {
 	MX6_PAD_RGMII_RD2__RGMII_RD2	| MUX_PAD_CTRL(ENET_PAD_CTRL),
 	MX6_PAD_RGMII_RD3__RGMII_RD3	| MUX_PAD_CTRL(ENET_PAD_CTRL),
 	MX6_PAD_RGMII_RX_CTL__RGMII_RX_CTL	| MUX_PAD_CTRL(ENET_PAD_CTRL),
-	/* AR8031 PHY Reset */
-	MX6_PAD_ENET_CRS_DV__GPIO1_IO25		| MUX_PAD_CTRL(NO_PAD_CTRL),
+	/* PHY Reset */
+	MX6_PAD_ENET_CRS_DV__GPIO1_IO25		| MUX_PAD_CTRL(RGMIIRST_PAD_CTRL),
 };
 
 static void setup_iomux_enet(void)
 {
 	imx_iomux_v3_setup_multiple_pads(enet_pads, ARRAY_SIZE(enet_pads));
 
-	/* Reset AR8031 PHY */
+	/* Reset PHY */
 	gpio_direction_output(IMX_GPIO_NR(1, 25) , 0);
 	udelay(500);
 	gpio_set_value(IMX_GPIO_NR(1, 25), 1);
@@ -126,24 +130,11 @@ static iomux_v3_cfg_t const usdhc3_pads[] = {
 	MX6_PAD_NANDF_D0__GPIO2_IO00    | MUX_PAD_CTRL(NO_PAD_CTRL), /* CD */
 };
 
-static iomux_v3_cfg_t const usdhc4_pads[] = {
-	MX6_PAD_SD4_CLK__SD4_CLK   | MUX_PAD_CTRL(USDHC_PAD_CTRL),
-	MX6_PAD_SD4_CMD__SD4_CMD   | MUX_PAD_CTRL(USDHC_PAD_CTRL),
-	MX6_PAD_SD4_DAT0__SD4_DATA0 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
-	MX6_PAD_SD4_DAT1__SD4_DATA1 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
-	MX6_PAD_SD4_DAT2__SD4_DATA2 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
-	MX6_PAD_SD4_DAT3__SD4_DATA3 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
-	MX6_PAD_SD4_DAT4__SD4_DATA4 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
-	MX6_PAD_SD4_DAT5__SD4_DATA5 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
-	MX6_PAD_SD4_DAT6__SD4_DATA6 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
-	MX6_PAD_SD4_DAT7__SD4_DATA7 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
-};
-
-static iomux_v3_cfg_t const ecspi1_pads[] = {
-	MX6_PAD_KEY_COL0__ECSPI1_SCLK | MUX_PAD_CTRL(SPI_PAD_CTRL),
-	MX6_PAD_KEY_COL1__ECSPI1_MISO | MUX_PAD_CTRL(SPI_PAD_CTRL),
-	MX6_PAD_KEY_ROW0__ECSPI1_MOSI | MUX_PAD_CTRL(SPI_PAD_CTRL),
-	MX6_PAD_KEY_ROW1__GPIO4_IO09 | MUX_PAD_CTRL(NO_PAD_CTRL),
+static iomux_v3_cfg_t const ecspi3_pads[] = {
+	MX6_PAD_DISP0_DAT0__ECSPI3_SCLK | MUX_PAD_CTRL(SPI_PAD_CTRL),
+	MX6_PAD_DISP0_DAT2__ECSPI3_MISO | MUX_PAD_CTRL(SPI_PAD_CTRL),
+	MX6_PAD_DISP0_DAT1__ECSPI3_MOSI | MUX_PAD_CTRL(SPI_PAD_CTRL),
+	MX6_PAD_DISP0_DAT5__GPIO4_IO26 | MUX_PAD_CTRL(NO_PAD_CTRL),
 };
 
 static iomux_v3_cfg_t const rgb_pads[] = {
@@ -200,7 +191,7 @@ static struct i2c_pads_info i2c_pad_info1 = {
 
 static void setup_spi(void)
 {
-	imx_iomux_v3_setup_multiple_pads(ecspi1_pads, ARRAY_SIZE(ecspi1_pads));
+	imx_iomux_v3_setup_multiple_pads(ecspi3_pads, ARRAY_SIZE(ecspi3_pads));
 }
 
 iomux_v3_cfg_t const pcie_pads[] = {
@@ -213,22 +204,15 @@ static void setup_pcie(void)
 	imx_iomux_v3_setup_multiple_pads(pcie_pads, ARRAY_SIZE(pcie_pads));
 }
 
-iomux_v3_cfg_t const di0_pads[] = {
-	MX6_PAD_DI0_DISP_CLK__IPU1_DI0_DISP_CLK,	/* DISP0_CLK */
-	MX6_PAD_DI0_PIN2__IPU1_DI0_PIN02,		/* DISP0_HSYNC */
-	MX6_PAD_DI0_PIN3__IPU1_DI0_PIN03,		/* DISP0_VSYNC */
-};
-
 static void setup_iomux_uart(void)
 {
 	imx_iomux_v3_setup_multiple_pads(uart1_pads, ARRAY_SIZE(uart1_pads));
 }
 
 #ifdef CONFIG_FSL_ESDHC
-struct fsl_esdhc_cfg usdhc_cfg[3] = {
+struct fsl_esdhc_cfg usdhc_cfg[2] = {
 	{USDHC2_BASE_ADDR},
 	{USDHC3_BASE_ADDR},
-	{USDHC4_BASE_ADDR},
 };
 
 #define USDHC2_CD_GPIO	IMX_GPIO_NR(2, 2)
@@ -246,9 +230,6 @@ int board_mmc_getcd(struct mmc *mmc)
 	case USDHC3_BASE_ADDR:
 		ret = !gpio_get_value(USDHC3_CD_GPIO);
 		break;
-	case USDHC4_BASE_ADDR:
-		ret = 1; /* eMMC/uSDHC4 is always present */
-		break;
 	}
 
 	return ret;
@@ -265,7 +246,6 @@ int board_mmc_init(bd_t *bis)
 	 * (U-boot device node)    (Physical Port)
 	 * mmc0                    SD2
 	 * mmc1                    SD3
-	 * mmc2                    eMMC
 	 */
 	for (i = 0; i < CONFIG_SYS_FSL_USDHC_NUM; i++) {
 		switch (i) {
@@ -281,11 +261,6 @@ int board_mmc_init(bd_t *bis)
 			gpio_direction_input(USDHC3_CD_GPIO);
 			usdhc_cfg[1].sdhc_clk = mxc_get_clock(MXC_ESDHC3_CLK);
 			break;
-		case 2:
-			imx_iomux_v3_setup_multiple_pads(
-				usdhc4_pads, ARRAY_SIZE(usdhc4_pads));
-			usdhc_cfg[2].sdhc_clk = mxc_get_clock(MXC_ESDHC4_CLK);
-			break;
 		default:
 			printf("Warning: you configured more USDHC controllers"
 			       "(%d) then supported by the board (%d)\n",
@@ -308,7 +283,6 @@ int board_mmc_init(bd_t *bis)
 	 * mmc port
 	 * 0x1                  SD1
 	 * 0x2                  SD2
-	 * 0x3                  SD4
 	 */
 
 	switch (reg & 0x3) {
@@ -326,13 +300,6 @@ int board_mmc_init(bd_t *bis)
 		usdhc_cfg[0].sdhc_clk = mxc_get_clock(MXC_ESDHC3_CLK);
 		gd->arch.sdhc_clk = usdhc_cfg[0].sdhc_clk;
 		break;
-	case 0x3:
-		imx_iomux_v3_setup_multiple_pads(
-			usdhc4_pads, ARRAY_SIZE(usdhc4_pads));
-		usdhc_cfg[0].esdhc_base = USDHC4_BASE_ADDR;
-		usdhc_cfg[0].sdhc_clk = mxc_get_clock(MXC_ESDHC4_CLK);
-		gd->arch.sdhc_clk = usdhc_cfg[0].sdhc_clk;
-		break;
 	}
 
 	return fsl_esdhc_initialize(bis, &usdhc_cfg[0]);
@@ -340,25 +307,24 @@ int board_mmc_init(bd_t *bis)
 }
 #endif
 
+#define MII_1000BASET_CTRL		0x9
+#define MII_EXTENDED_CTRL		0xb
+#define MII_EXTENDED_DATAW		0xc
+
 int mx6_rgmii_rework(struct phy_device *phydev)
 {
-	unsigned short val;
+	//added iMX6 Rex KSZ9021 support, taken from Saberlite
+	/* enable master mode, force phy to 100Mbps */
+	//phy_write(devname, phy_addr, 0x9, 0x1c00);
 
-	/* To enable AR8031 ouput a 125MHz clk from CLK_25M */
-	phy_write(phydev, MDIO_DEVAD_NONE, 0xd, 0x7);
-	phy_write(phydev, MDIO_DEVAD_NONE, 0xe, 0x8016);
-	phy_write(phydev, MDIO_DEVAD_NONE, 0xd, 0x4007);
+	/* min rx data delay */
+	phy_write(phydev, MII_EXTENDED_CTRL, 0x0b, 0x8105);
+	phy_write(phydev, MII_EXTENDED_DATAW, 0x0c, 0x0000);
 
-	val = phy_read(phydev, MDIO_DEVAD_NONE, 0xe);
-	val &= 0xffe3;
-	val |= 0x18;
-	phy_write(phydev, MDIO_DEVAD_NONE, 0xe, val);
-
-	/* introduce tx clock delay */
-	phy_write(phydev, MDIO_DEVAD_NONE, 0x1d, 0x5);
-	val = phy_read(phydev, MDIO_DEVAD_NONE, 0x1e);
-	val |= 0x0100;
-	phy_write(phydev, MDIO_DEVAD_NONE, 0x1e, val);
+	/* max rx/tx clock delay, min rx/tx control delay */
+	phy_write(phydev, MII_EXTENDED_CTRL, 0x0b, 0x8104);
+	phy_write(phydev, MII_EXTENDED_DATAW, 0x0c, 0xf0f0);
+	phy_write(phydev, MII_EXTENDED_CTRL, 0x0b, 0x104);
 
 	return 0;
 }
@@ -471,9 +437,6 @@ static void setup_display(void)
 	struct iomuxc *iomux = (struct iomuxc *)IOMUXC_BASE_ADDR;
 	int reg;
 
-	/* Setup HSYNC, VSYNC, DISP_CLK for debugging purposes */
-	imx_iomux_v3_setup_multiple_pads(di0_pads, ARRAY_SIZE(di0_pads));
-
 	enable_ipu_clock();
 	imx_setup_hdmi();
 
@@ -630,7 +593,7 @@ int board_init(void)
 
 int power_init_board(void)
 {
-	struct pmic *p;
+/*	struct pmic *p;
 	unsigned int reg, ret;
 
 	p = pfuze_common_init(I2C_PMIC);
@@ -640,19 +603,19 @@ int power_init_board(void)
 	ret = pfuze_mode_init(p, APS_PFM);
 	if (ret < 0)
 		return ret;
-
+*/
 	/* Increase VGEN3 from 2.5 to 2.8V */
-	pmic_reg_read(p, PFUZE100_VGEN3VOL, &reg);
+/*	pmic_reg_read(p, PFUZE100_VGEN3VOL, &reg);
 	reg &= ~LDO_VOL_MASK;
 	reg |= LDOB_2_80V;
 	pmic_reg_write(p, PFUZE100_VGEN3VOL, reg);
-
+*/
 	/* Increase VGEN5 from 2.8 to 3V */
-	pmic_reg_read(p, PFUZE100_VGEN5VOL, &reg);
+/*	pmic_reg_read(p, PFUZE100_VGEN5VOL, &reg);
 	reg &= ~LDO_VOL_MASK;
 	reg |= LDOB_3_00V;
 	pmic_reg_write(p, PFUZE100_VGEN5VOL, reg);
-
+*/
 	return 0;
 }
 
@@ -668,14 +631,19 @@ static const struct boot_mode board_boot_modes[] = {
 	/* 4 bit bus width */
 	{"sd2",	 MAKE_CFGVAL(0x40, 0x28, 0x00, 0x00)},
 	{"sd3",	 MAKE_CFGVAL(0x40, 0x30, 0x00, 0x00)},
-	/* 8 bit bus width */
-	{"emmc", MAKE_CFGVAL(0x40, 0x38, 0x00, 0x00)},
 	{NULL,	 0},
 };
 #endif
 
 int board_late_init(void)
 {
+       	// Make sure we enable ECSPI3 clock
+       	int reg;
+       	struct mxc_ccm_reg *mxc_ccm = (struct mxc_ccm_reg *)CCM_BASE_ADDR;
+       	reg = readl(&mxc_ccm->CCGR1);
+       	reg |=  MXC_CCM_CCGR1_ECSPI3S_MASK;
+	writel(reg, &mxc_ccm->CCGR1);
+
 #ifdef CONFIG_CMD_BMODE
 	add_board_boot_modes(board_boot_modes);
 #endif
@@ -684,7 +652,7 @@ int board_late_init(void)
 
 int checkboard(void)
 {
-	puts("Board: MX6-SabreSD\n");
+	puts("Board: i.MX6 Rex by FEDEVEL for BOMBARDIER.\n");
 	return 0;
 }
 
diff --git a/include/configs/mx6sabre_common.h b/include/configs/mx6sabre_common.h
index a8746a4..bd6a190 100644
--- a/include/configs/mx6sabre_common.h
+++ b/include/configs/mx6sabre_common.h
@@ -67,20 +67,21 @@
 #define IMX_FEC_BASE			ENET_BASE_ADDR
 #define CONFIG_FEC_XCV_TYPE		RGMII
 #define CONFIG_ETHPRIME			"FEC"
-#define CONFIG_FEC_MXC_PHYADDR		1
+#define CONFIG_FEC_MXC_PHYADDR		3
 
 #define CONFIG_PHYLIB
-#define CONFIG_PHY_ATHEROS
+#define CONFIG_PHY_MICREL
+#define CONFIG_PHY_MICREL_KSZ9021
 
 #define CONFIG_CMD_SF
 #ifdef CONFIG_CMD_SF
 #define CONFIG_SPI_FLASH
-#define CONFIG_SPI_FLASH_STMICRO
+#define CONFIG_SPI_FLASH_SST
 #define CONFIG_MXC_SPI
-#define CONFIG_SF_DEFAULT_BUS		0
-#define CONFIG_SF_DEFAULT_CS		0
-#define CONFIG_SF_DEFAULT_SPEED		20000000
-#define CONFIG_SF_DEFAULT_MODE		SPI_MODE_0
+#define CONFIG_SF_DEFAULT_BUS		2 //CSPI3 - 1
+#define CONFIG_SF_DEFAULT_CS		(0 | (IMX_GPIO_NR(4, 26) << 8)) //CS is connected to GPIO4_IO26, the first number must be same as bus
+#define CONFIG_SF_DEFAULT_SPEED		25000000
+#define CONFIG_SF_DEFAULT_MODE		(SPI_MODE_0)
 #endif
 
 /* allow to overwrite serial and ethaddr */
@@ -96,7 +97,7 @@
 #define CONFIG_CMD_SETEXPR
 #undef CONFIG_CMD_IMLS
 
-#define CONFIG_BOOTDELAY               1
+#define CONFIG_BOOTDELAY               5
 
 #define CONFIG_LOADADDR                        0x12000000
 #define CONFIG_SYS_TEXT_BASE           0x17800000
diff --git a/include/configs/mx6sabresd.h b/include/configs/mx6sabresd.h
index 9835510..3ec9346 100644
--- a/include/configs/mx6sabresd.h
+++ b/include/configs/mx6sabresd.h
@@ -36,7 +36,7 @@
 
 #include "mx6sabre_common.h"
 
-#define CONFIG_SYS_FSL_USDHC_NUM	3
+#define CONFIG_SYS_FSL_USDHC_NUM	2
 #if defined(CONFIG_ENV_IS_IN_MMC)
 #define CONFIG_SYS_MMC_ENV_DEV		1	/* SDHC3 */
 #endif
-- 
1.9.1

